package controller.card;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Timestamp;
//import java.sql.Date;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import dao.CardDao;
import dao.TradDao;
import login.UserFunction;
import login.UserLogin;
import util.WindowSize;
import util.CurrentCardInfo;
import util.StrADate;
import model.CardModel;
import model.TradModel;
import service.TradService;

public class withdrawMoney extends JPanel implements WindowSize {
	private JFrame frame;
	private JPanel panel = new JPanel();
	private JPanel panel1 = new JPanel();
	private JPanel panel2 = new JPanel();
	private JButton button1;
	private JButton button2;
	private JButton button3;
	private JButton button4;
	private JButton button5;
	private JButton button6;
	private JButton button7;
	private JButton button8;
	private JLabel label1;
	private JLabel label2;
	private JTextField text;
	private TradModel trad;

	CurrentCardInfo CurrCard = new CurrentCardInfo();

	public withdrawMoney(JFrame frame) {
		this.frame = frame;
		this.setLayout(null);
		this.setBounds(P_0, P_1, P_2, P_3);
		panel.setBackground(null);
		panel.setOpaque(false);
		panel.setBounds(0, 0, 680, 500);
		add(panel);
		panel.setLayout(null);

		button1 = new JButton("100");
		button1.setBounds(10, 165, 80, 40);
		button1.setFont(new Font("黑体", Font.BOLD, 18));
		panel.add(button1);
		button1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int curr_withdrawMoney = Integer.parseInt(button1.getText().trim()); // 获取当前的取款金额
				if (CurrCard.getCardInfo().getStatus() != 3) { // 判断卡是否处于冻结状态
					withdraw_money(curr_withdrawMoney, CurrCard);
				} else {
					JOptionPane.showMessageDialog(frame.getContentPane(), "卡已被冻结，不能进行取款操作", "系统信息",
							JOptionPane.INFORMATION_MESSAGE);
					System.out.println("卡已被冻结，不能进行取款操作");
				}
			}
		});

		button2 = new JButton("300");
		button2.setBounds(10, 240, 80, 40);
		button2.setFont(new Font("黑体", Font.BOLD, 18));
		panel.add(button2);
		button2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int curr_withdrawMoney = Integer.parseInt(button2.getText().trim()); // 获取当前的取款金额
				if (CurrCard.getCardInfo().getStatus() != 3) { // 判断卡是否处于冻结状态
					withdraw_money(curr_withdrawMoney, CurrCard);
				} else {
					JOptionPane.showMessageDialog(frame.getContentPane(), "卡已被冻结，不能进行取款操作", "系统信息",
							JOptionPane.INFORMATION_MESSAGE);
					System.out.println("卡已被冻结，不能进行取款操作");
				}
			}
		});

		button3 = new JButton("500");
		button3.setBounds(10, 315, 80, 40);
		button3.setFont(new Font("黑体", Font.BOLD, 18));
		panel.add(button3);
		button3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int curr_withdrawMoney = Integer.parseInt(button3.getText().trim()); // 获取当前的取款金额
				if (CurrCard.getCardInfo().getStatus() != 3) { // 判断卡是否处于冻结状态
					withdraw_money(curr_withdrawMoney, CurrCard);
				} else {
					JOptionPane.showMessageDialog(frame.getContentPane(), "卡已被冻结，不能进行取款操作", "系统信息",
							JOptionPane.INFORMATION_MESSAGE);
					System.out.println("卡已被冻结，不能进行取款操作");
				}
			}
		});

		button4 = new JButton("1000");
		button4.setBounds(594, 165, 80, 40);
		// button4.setForeground(Color.WHITE);
		button4.setFont(new Font("黑体", Font.BOLD, 18));
		panel.add(button4);
		button4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int curr_withdrawMoney = Integer.parseInt(button4.getText().trim()); // 获取当前的取款金额
				if (CurrCard.getCardInfo().getStatus() != 3) { // 判断卡是否处于冻结状态
					withdraw_money(curr_withdrawMoney, CurrCard);
				} else {
					JOptionPane.showMessageDialog(frame.getContentPane(), "卡已被冻结，不能进行取款操作", "系统信息",
							JOptionPane.INFORMATION_MESSAGE);
					System.out.println("卡已被冻结，不能进行取款操作");
				}
			}
		});

		button5 = new JButton("1500");
		button5.setBounds(594, 240, 80, 40);
		button5.setFont(new Font("黑体", Font.BOLD, 18));
		panel.add(button5);
		button5.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int curr_withdrawMoney = Integer.parseInt(button5.getText().trim()); // 获取当前的取款金额
				if (CurrCard.getCardInfo().getStatus() != 3) { // 判断卡是否处于冻结状态
					withdraw_money(curr_withdrawMoney, CurrCard);
				} else {
					JOptionPane.showMessageDialog(frame.getContentPane(), "卡已被冻结，不能进行取款操作", "系统信息",
							JOptionPane.INFORMATION_MESSAGE);
					System.out.println("卡已被冻结，不能进行取款操作");
				}
			}
		});

		button6 = new JButton("2000");
		button6.setBounds(594, 315, 80, 40);
		button6.setFont(new Font("黑体", Font.BOLD, 18));
		panel.add(button6);
		button6.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int curr_withdrawMoney = Integer.parseInt(button6.getText().trim()); // 获取当前的取款金额
				if (CurrCard.getCardInfo().getStatus() != 3) { // 判断卡是否处于冻结状态
					withdraw_money(curr_withdrawMoney, CurrCard);
				} else {
					JOptionPane.showMessageDialog(frame.getContentPane(), "卡已被冻结，不能进行取款操作", "系统信息",
							JOptionPane.INFORMATION_MESSAGE);
					System.out.println("卡已被冻结，不能进行取款操作");
				}
			}
		});

		label1 = new JLabel("请选择或输入取款金额");
		label1.setBounds(235, 170, 200, 30);
		label1.setForeground(Color.WHITE);
		label1.setFont(new Font("黑体", Font.BOLD, 18));
		panel.add(label1);

		text = new JTextField();
		text.setBounds(235, 210, 200, 30);
		panel.add(text);

		button7 = new JButton("返回");
		button7.setBounds(10, 390, 80, 40);
		button7.setFont(new Font("黑体", Font.BOLD, 18));
		panel.add(button7);
		button7.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.dispose();
				new UserFunction();
			}
		});

		button8 = new JButton("确认");
		button8.setBounds(594, 390, 80, 40);
		button8.setFont(new Font("黑体", Font.BOLD, 18));
		panel.add(button8);
		button8.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int curr_withdrawMoney = Integer.parseInt(text.getText().trim()); // 获取当前的取款金额
				if (CurrCard.getCardInfo().getStatus() != 3) { // 判断卡是否处于冻结状态
					if (curr_withdrawMoney % 100 == 0 && curr_withdrawMoney > 0) { // 判断输入的金额是否是100的正整数倍
						if (curr_withdrawMoney <= 2000) { // 判断输入的数字是否小于2000
							withdraw_money(curr_withdrawMoney, CurrCard);
						} else {
							JOptionPane.showMessageDialog(frame.getContentPane(), "一次取款不能超过2000元", "系统信息",
									JOptionPane.INFORMATION_MESSAGE);
							System.out.println("一次取款不能超过2000元");
						}
					} else {
						JOptionPane.showMessageDialog(frame.getContentPane(), "输入的取款金额必须是100的整数倍", "系统信息",
								JOptionPane.INFORMATION_MESSAGE);
						System.out.println("输入的取款金额必须是100的正整数倍");
					}
				} else {
					JOptionPane.showMessageDialog(frame.getContentPane(), "卡已被冻结，不能进行取款操作", "系统信息",
							JOptionPane.INFORMATION_MESSAGE);
					System.out.println("卡已被冻结，不能进行取款操作");
				}
			}
		});

	//	withdrawMoneySuc(CurrCard);

		// 设置背景图片
		JLabel label_1 = new JLabel("");
		label_1.setIcon(new ImageIcon(".\\2.jpg"));
		label_1.setBounds(P_0, P_1, P_2, P_3);
		add(label_1);
	}

	// 判断取款是否成功
	private void withdraw_money(int curr_withdrawMoney,CurrentCardInfo CurrCard){
		//CardModel card = new CardModel();
		
		String id=CurrCard.getCardInfo().getCard_id();	//获取当前账户的账号
		double currMoney=CurrCard.getCardInfo().getMoneys();//获取当前账户余额
		String curr_bankCode=CurrCard.getCardInfo().getBank_code(); //获取当前银行编号
		int curr_type=CurrCard.getCardInfo().getType(); //获取当前卡的类型
		System.out.println("jj"+curr_type);
		double curr_creditLine=CurrCard.getCardInfo().getCredit_line();//获取当前卡的透支额度
		int curr_status=CurrCard.getCardInfo().getStatus();//获取当前卡的状态
		double today_withdrawMoney=new TradService().getTodayTrad(id, 2);//获取当天的取款金额
		System.out.println(CurrCard);
		double serviceMoney=curr_withdrawMoney*0.001;
		
		trad=new TradModel();                 //获得当前账户的交易信息
		trad.setCard_id(id);
		trad.setAmount(curr_withdrawMoney);
		trad.setTrad_type(2);	
		System.out.println(trad);
		
		if(today_withdrawMoney+curr_withdrawMoney<=5000){  //判断当天取款金额是否小于5000元
			if(curr_bankCode=="6525"){  //判断是否是本行的卡
					if(currMoney>=curr_withdrawMoney){
						new CardDao().updateMoney(currMoney-curr_withdrawMoney,curr_creditLine,id);
						CurrCard.setCardInfo(new CardDao().checkCard(id));
						System.out.println(CurrCard.getCardInfo().getCredit_line());
						new TradService().addTrad(trad);
						///panel.setVisible(false);
					//	panel1.setVisible(true);
						frame.dispose();
						new withdrawMoneySuc(CurrCard,curr_withdrawMoney);
						System.out.println("取款成功");
						
					}
					else{//余额不足时判断是否是信用卡
						if(curr_type==1){
							if(curr_creditLine-(curr_withdrawMoney-currMoney)>=0){ //可透支余额加余额大于等于取款金额
								new CardDao().updateMoney(0,curr_creditLine-(curr_withdrawMoney-currMoney),id);
								CurrCard.setCardInfo(new CardDao().checkCard(id));
								//CurrCard.setCardInfo(new CardDao().checkCard(id));
								new TradService().addTrad(trad);
							//	panel.setVisible(false);
							//	panel1.setVisible(true);
								frame.dispose();
								new withdrawMoneySuc(CurrCard,curr_withdrawMoney);
								System.out.println("取款成功");
							}
							else{
								JOptionPane.showMessageDialog(frame.getContentPane(), "透支额度不足，取款失败", "系统信息", JOptionPane.INFORMATION_MESSAGE);
								System.out.println("透支额度不足，取款失败");
							}
						}
						else{
							System.out.println("ww");
							JOptionPane.showMessageDialog(frame.getContentPane(), "余额不足，取款失败", "系统信息", JOptionPane.INFORMATION_MESSAGE);
							System.out.println("余额不足，取款失败");
						}
					}
				}
			else{ //跨行取款，需收取手续费
				if(currMoney+serviceMoney>=curr_withdrawMoney){
					new CardDao().updateMoney(currMoney-curr_withdrawMoney,curr_creditLine,id);
					CurrCard.setCardInfo(new CardDao().checkCard(id));
					new TradService().addTrad(trad);
				//	panel.setVisible(false);
				//	panel1.setVisible(true);
					frame.dispose();
					new withdrawMoneySuc(CurrCard,curr_withdrawMoney);
					System.out.println("取款成功");
				}
				else{//余额不足时判断是否是信用卡
					if(curr_type==1){
						if(curr_creditLine-(curr_withdrawMoney-currMoney+serviceMoney)>=0){ //可透支余额加余额大于等于取款金额
							new CardDao().updateMoney(0,curr_creditLine-(curr_withdrawMoney-currMoney-serviceMoney),id);
							CurrCard.setCardInfo(new CardDao().checkCard(id));
							new TradService().addTrad(trad);
						//	panel.setVisible(false);
						//	panel1.setVisible(true);
							frame.dispose();
							new withdrawMoneySuc(CurrCard,curr_withdrawMoney);
							System.out.println("取款成功");
						}
						else{
							JOptionPane.showMessageDialog(frame.getContentPane(), "透支额度不足，取款失败", "系统信息", JOptionPane.INFORMATION_MESSAGE);
							System.out.println("透支额度不足，取款失败");
						}
					}
					else{
						JOptionPane.showMessageDialog(frame.getContentPane(), "余额不足，取款失败", "系统信息", JOptionPane.INFORMATION_MESSAGE);
						System.out.println("余额不足，取款失败");
					}
				}
			}
		}
		else{
				JOptionPane.showMessageDialog(frame.getContentPane(), "今日取款已达上限，取款失败", "系统信息", JOptionPane.INFORMATION_MESSAGE);
				System.out.println("今日取款已达上限，取款失败");
		}
		System.out.println(curr_type);
		System.out.println(CurrCard.getCardInfo().getCredit_line());
		System.out.println(CurrCard.getCardInfo().getCard_id());
		System.out.println(CurrCard.getCardInfo().getMoneys());
		System.out.println(CurrCard.getCardInfo().getStatus());
		System.out.println("gg");
	}

/*	// 取款成功
	public void withdrawMoneySuc(CurrentCardInfo CurrCard) {
		panel1.setLayout(null);
		panel1.setBounds(P_0, P_1, P_2, P_3);
		panel1.setOpaque(false);

		JLabel label3 = new JLabel("取款成功！");
		label3.setForeground(new Color(127, 255, 0));
		label3.setFont(new Font("黑体", Font.BOLD, 25));
		label3.setBounds(269, 200, 153, 35);
		panel1.add(label3);

		
		double restCreditMoney=CurrCard.getCardInfo().getCredit_line();
		JLabel kyed = new JLabel("可透支额度为：" + restCreditMoney+ "元");
		kyed.setForeground(Color.WHITE); kyed.setFont(new Font("黑体",
		Font.BOLD, 23)); kyed.setBounds(224, 245, 400, 35); panel1.add(kyed);
		 

		JLabel label4 = new JLabel("余额为:" + CurrCard.getCardInfo().getMoneys() + "元");
		label4.setForeground(Color.WHITE);
		label4.setFont(new Font("黑体", Font.BOLD, 23));
		// label4.setBounds(255, 283, 265, 35);
		label4.setBounds(224, 245, 265, 35);
		panel1.add(label4);

		JButton button9 = new JButton("返回");
		button9.setBounds(562, 332, 108, 30);
		button9.setFont(new Font("黑体", Font.BOLD, 18));
		panel1.add(button9);
		button9.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.dispose();
				new UserFunction();
			}
		});
		button9.setFont(new Font("宋体", Font.PLAIN, 16));

		JButton button10 = new JButton("退卡");
		button10.setFont(new Font("黑体", Font.BOLD, 18));
		button10.setBounds(562, 397, 108, 27);
		panel1.add(button10);
		button10.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				frame.dispose();
				new UserLogin();
			}
		});
		add(panel1);
		panel1.setVisible(false);
	}*/

}
